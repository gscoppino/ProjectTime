# This is an Anaconda project file.
#
# Here you can describe your project and how to run it.
# Use `anaconda-project run` to run the project.
# The file is in YAML format, please see http://www.yaml.org/start.html for more.
#

#
# Set the 'name' key to name your project
#
name: ProjectTime

#
# Set the 'icon' key to give your project an icon
#
icon:

#
# Set a one-sentence-or-so 'description' key with project details
#
description:

#
# In the commands section, list your runnable scripts, notebooks, and other code.
# Use `anaconda-project add-command` to add commands.
#
commands: {
  postgres: {unix: postgres, env_spec: database},
  pg_ctl: {unix: pg_ctl, env_spec: database},
  pg_dump: {unix: pg_dump, env_spec: database},
  psql: {unix: psql, env_spec: database},
  django-admin: {unix: django-admin, env_spec: application},
  manage.py: {unix: django-admin, env_spec: application},
  coverage: {unix: cd $PYTHONPATH && coverage, env_spec: test},
  robot: {unix: robot, env_spec: test-acceptance},
  robot-tidy: {unix: python -m robot.tidy, env_spec: test-acceptance},
  jupyter: {unix: jupyter, env_spec: devtools}
}

#
# In the variables section, list any environment variables your code depends on.
# Use `anaconda-project add-variable` to add variables.
#
variables: {
  PGDATA: { default: ./db, description: Where PostgreSQL database files are stored },
  PYTHONPATH: { default: src, description: Where Python source files are stored },
  DJANGO_SETTINGS_MODULE: { default: config.settings, description: Which Django settings file to use }
}

#
# In the services section, list any services that should be
# available before your code runs.
# Use `anaconda-project add-service` to add services.
#
services: {}

#
# In the downloads section, list any URLs to download to local files
# before your code runs.
# Use `anaconda-project add-download` to add downloads.
#
downloads: {}

#
# In the packages section, list any packages that must be installed
# before your code runs.
# Use `anaconda-project add-packages` to add packages.
#
packages: []

channels: [conda-forge]

#
# In the platforms section, list platforms the project should work on
# Examples: "linux-64", "osx-64", "win-64"
# Use `anaconda-project add-platforms` to add platforms.
#
platforms:
- linux-64
- osx-64
- win-64

#
# You can define multiple, named environment specs.
# Each inherits any global packages or channels,
# but can have its own unique ones also.
# Use `anaconda-project add-env-spec` to add environment specs.
#
env_specs:
  _python_:
    inherit_from: []
    packages: [python=3.8]
  _anaconda-project_:
    inherit_from: [_python_]
    packages: [anaconda-project]
  _notebook_:
    inherit_from: [_python_]
    packages: [notebook]
  database:
    inherit_from: []
    packages: [postgresql=12.2]
  application:
    inherit_from: [_python_]
    packages: [psycopg2=2.8, sqlparse=0.3, pytz=2019.3, django=3.0, pandas=1.0, bokeh=2.1]
  application-debug:
    inherit_from: [application]
    packages: [django-debug-toolbar=2.2]
    variables: {
      DJANGO_SETTINGS_MODULE: config.settings-debug
    }
  devtools:
    inherit_from: [application-debug, _anaconda-project_, _notebook_]
    packages: [notebook, pylint, pep8, autopep8]
  test:
    inherit_from: [application]
    packages: [coverage]
  test-acceptance:
    inherit_from: [_python_, _anaconda-project_]
    packages:
      - robotframework
      - robotframework-seleniumlibrary
      - python-chromedriver-binary<81
      - geckodriver
