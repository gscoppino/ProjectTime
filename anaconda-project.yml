# This is an Anaconda project file.
# It describes the project and how it can be run.
# The file is in YAML format, please see http://www.yaml.org/start.html for more.

name: ProjectTime
description: A tool that can be used to keep track of time spent on projects.

# lists runnable scripts, notebooks, and other code.
commands: {
  postgres: {unix: postgres, env_spec: database},
  pg_ctl: {unix: pg_ctl, env_spec: database},
  pg_dump: {unix: pg_dump, env_spec: database},
  psql: {unix: psql, env_spec: database},
  django-admin: {unix: python -m scripts.dev_install && django-admin, env_spec: application},
  manage.py: {unix: python -m scripts.dev_install && cd src/ProjectTime && python manage.py, env_spec: application},
  coverage: {unix: python -m scripts.dev_install && cd src/ProjectTime && coverage, env_spec: test},
  robot: {unix: robot, env_spec: test-acceptance},
  robot.tidy: {unix: python -m robot.tidy, env_spec: test-acceptance},
  jupyter: {unix: python -m scripts.dev_install && jupyter, env_spec: devtools},
  setup.py: {unix: python setup.py, env_spec: build-pypi},
  conda-build: {unix: conda-build, env_spec: build-conda}
}

#
# In the variables section, list any environment variables your code depends on.
# Use `anaconda-project add-variable` to add variables.
#
variables: {
  PGDATA: { default: db, description: Where PostgreSQL database files are stored },
  DJANGO_SETTINGS_MODULE: { default: ProjectTime.config.settings, description: Which Django settings file to use },
  PROJECT_TIME_VERSION: 1.0.0
}

# lists any services that should be available before the code runs.
services: {}

# lists any URLs to download to local files
downloads: {}

# lists any packages that must be installed before the code runs.
packages: []

# list the channels that are used to install packages
channels: [conda-forge]

# lists platforms the project should work on
platforms:
- linux-64
- osx-64
- win-64

# Multiple, named environment specs can be defined.
# Each inherits any global packages or channels,
# but can have its own unique ones also.
env_specs:
  _python_:
    inherit_from: []
    packages: [python=3.8, pip]
  _anaconda-project_:
    inherit_from: [_python_]
    packages: [anaconda-project]
  _notebook_:
    inherit_from: [_python_]
    packages: [notebook]
  database:
    inherit_from: []
    packages: [postgresql=12.2]
  application:
    inherit_from: [_python_]
    packages: [psycopg2=2.8, sqlparse=0.3, pytz=2019.3, django=3.0, pandas=1.0, bokeh=2.1]
  application-debug:
    inherit_from: [application]
    packages: [django-debug-toolbar=2.2]
    variables: {
      DJANGO_SETTINGS_MODULE: ProjectTime.config.settings-debug
    }
  devtools:
    inherit_from: [application-debug, _anaconda-project_, _notebook_]
    packages: [notebook, pylint, pep8, autopep8]
  test:
    inherit_from: [application]
    packages:
      - coverage
  test-acceptance:
    inherit_from: [_python_, _anaconda-project_]
    packages:
      - robotframework
      - robotframework-seleniumlibrary
      - python-chromedriver-binary<81
      - geckodriver
  build-pypi:
    inherit_from: [_python_]
    packages:
      - setuptools
      - pyyaml
  build-conda:
    inherit_from: [_python_, build-pypi]
    packages:
      - conda
      - conda-build
